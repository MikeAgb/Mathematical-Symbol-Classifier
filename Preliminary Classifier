#This is the preliminary classifier used for the results obtained in project_proposal_2

from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

classifier = Sequential()
classifier.add(Conv2D(32, (3, 3), input_shape = (48, 48, 1), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Conv2D(32, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Flatten())
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 80, activation = 'softmax'))
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./45
                                   #shear_range = 0.2,
                                   #zoom_range = 0.1,
                                   #horizontal_flip = True,
                                   #zca_whitening = True)

test_datagen = ImageDataGenerator(rescale = 1./45)

training_set = train_datagen.flow_from_directory('/Users/ghassanagaby/Desktop/output/train',
                                                 target_size = (48, 48),
                                                 batch_size = 64,
                                                 class_mode = 'categorical',
                                                 shuffle=True,
                                                 color_mode='grayscale')

test_set = test_datagen.flow_from_directory('/Users/ghassanagaby/Desktop/output/test',
                                            target_size = (48, 48),
                                            batch_size = 64,
                                            class_mode = 'categorical',
                                            color_mode='grayscale')

labels = test_set.class_indices
labels = {v: k for k, v in labels.items()} 

x = classifier.fit_generator(training_set,
                         steps_per_epoch = 80,
                         epochs = 50,
                         validation_data = test_set,
                         validation_steps = 200)
                         
                      
